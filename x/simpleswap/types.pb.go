// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos/simpleswap/v1/types.proto

package simpleswap

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters of the module.
type Params struct {
	WhitelistedCoins  []*types.Coin `protobuf:"bytes,1,rep,name=whitelistedCoins,proto3" json:"whitelistedCoins,omitempty"`
	SwapFeePercentage int32         `protobuf:"varint,2,opt,name=swapFeePercentage,proto3" json:"swapFeePercentage,omitempty"`
	Decimals          int64         `protobuf:"varint,3,opt,name=decimals,proto3" json:"decimals,omitempty"`
	ShareToken        *types.Coin   `protobuf:"bytes,4,opt,name=shareToken,proto3" json:"shareToken,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_23045ec30cd6e897, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetWhitelistedCoins() []*types.Coin {
	if m != nil {
		return m.WhitelistedCoins
	}
	return nil
}

func (m *Params) GetSwapFeePercentage() int32 {
	if m != nil {
		return m.SwapFeePercentage
	}
	return 0
}

func (m *Params) GetDecimals() int64 {
	if m != nil {
		return m.Decimals
	}
	return 0
}

func (m *Params) GetShareToken() *types.Coin {
	if m != nil {
		return m.ShareToken
	}
	return nil
}

type LiquidityProvider struct {
	StableCoin          *types.Coin `protobuf:"bytes,1,opt,name=stableCoin,proto3" json:"stableCoin,omitempty"`
	PoolShare           *types.Coin `protobuf:"bytes,2,opt,name=poolShare,proto3" json:"poolShare,omitempty"`
	AccruedFees         int64       `protobuf:"varint,3,opt,name=accruedFees,proto3" json:"accruedFees,omitempty"`
	GloballyAccruedFees int64       `protobuf:"varint,4,opt,name=globallyAccruedFees,proto3" json:"globallyAccruedFees,omitempty"`
}

func (m *LiquidityProvider) Reset()         { *m = LiquidityProvider{} }
func (m *LiquidityProvider) String() string { return proto.CompactTextString(m) }
func (*LiquidityProvider) ProtoMessage()    {}
func (*LiquidityProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_23045ec30cd6e897, []int{1}
}
func (m *LiquidityProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidityProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidityProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidityProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidityProvider.Merge(m, src)
}
func (m *LiquidityProvider) XXX_Size() int {
	return m.Size()
}
func (m *LiquidityProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidityProvider.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidityProvider proto.InternalMessageInfo

func (m *LiquidityProvider) GetStableCoin() *types.Coin {
	if m != nil {
		return m.StableCoin
	}
	return nil
}

func (m *LiquidityProvider) GetPoolShare() *types.Coin {
	if m != nil {
		return m.PoolShare
	}
	return nil
}

func (m *LiquidityProvider) GetAccruedFees() int64 {
	if m != nil {
		return m.AccruedFees
	}
	return 0
}

func (m *LiquidityProvider) GetGloballyAccruedFees() int64 {
	if m != nil {
		return m.GloballyAccruedFees
	}
	return 0
}

type Pool struct {
	TotalAccruedFees  int64       `protobuf:"varint,1,opt,name=totalAccruedFees,proto3" json:"totalAccruedFees,omitempty"`
	TotalLiquidity    int64       `protobuf:"varint,2,opt,name=totalLiquidity,proto3" json:"totalLiquidity,omitempty"`
	Decimals          int64       `protobuf:"varint,3,opt,name=decimals,proto3" json:"decimals,omitempty"`
	ShareToken        *types.Coin `protobuf:"bytes,4,opt,name=shareToken,proto3" json:"shareToken,omitempty"`
	SwapFeePercentage int32       `protobuf:"varint,5,opt,name=swapFeePercentage,proto3" json:"swapFeePercentage,omitempty"`
}

func (m *Pool) Reset()         { *m = Pool{} }
func (m *Pool) String() string { return proto.CompactTextString(m) }
func (*Pool) ProtoMessage()    {}
func (*Pool) Descriptor() ([]byte, []int) {
	return fileDescriptor_23045ec30cd6e897, []int{2}
}
func (m *Pool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pool.Merge(m, src)
}
func (m *Pool) XXX_Size() int {
	return m.Size()
}
func (m *Pool) XXX_DiscardUnknown() {
	xxx_messageInfo_Pool.DiscardUnknown(m)
}

var xxx_messageInfo_Pool proto.InternalMessageInfo

func (m *Pool) GetTotalAccruedFees() int64 {
	if m != nil {
		return m.TotalAccruedFees
	}
	return 0
}

func (m *Pool) GetTotalLiquidity() int64 {
	if m != nil {
		return m.TotalLiquidity
	}
	return 0
}

func (m *Pool) GetDecimals() int64 {
	if m != nil {
		return m.Decimals
	}
	return 0
}

func (m *Pool) GetShareToken() *types.Coin {
	if m != nil {
		return m.ShareToken
	}
	return nil
}

func (m *Pool) GetSwapFeePercentage() int32 {
	if m != nil {
		return m.SwapFeePercentage
	}
	return 0
}

// GenesisState is the state that must be provided at genesis.
type GenesisState struct {
	// Pool is the liquidity pool invovlved in our simpleswap module.
	Pool *Pool `protobuf:"bytes,1,opt,name=pool,proto3" json:"pool,omitempty"`
	// params defines all the parameters of the module.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_23045ec30cd6e897, []int{3}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetPool() *Pool {
	if m != nil {
		return m.Pool
	}
	return nil
}

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func init() {
	proto.RegisterType((*Params)(nil), "cosmos.simpleswap.v1.Params")
	proto.RegisterType((*LiquidityProvider)(nil), "cosmos.simpleswap.v1.LiquidityProvider")
	proto.RegisterType((*Pool)(nil), "cosmos.simpleswap.v1.Pool")
	proto.RegisterType((*GenesisState)(nil), "cosmos.simpleswap.v1.GenesisState")
}

func init() { proto.RegisterFile("cosmos/simpleswap/v1/types.proto", fileDescriptor_23045ec30cd6e897) }

var fileDescriptor_23045ec30cd6e897 = []byte{
	// 498 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x53, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0xce, 0x91, 0xb4, 0xa2, 0x57, 0x84, 0x9a, 0xa3, 0x83, 0x1b, 0x15, 0x63, 0x65, 0x40, 0x51,
	0x84, 0xce, 0x04, 0x24, 0x10, 0x2c, 0x88, 0x22, 0xca, 0xc2, 0x10, 0xb9, 0x4c, 0x2c, 0xe8, 0xec,
	0x3c, 0x39, 0x27, 0xce, 0x7e, 0xc6, 0x77, 0x49, 0x95, 0x89, 0x9d, 0x89, 0x9f, 0xc1, 0xd8, 0x9f,
	0xd1, 0xb1, 0x23, 0x12, 0x12, 0xa0, 0x64, 0xe8, 0x0f, 0xe0, 0x0f, 0x20, 0x9f, 0x4d, 0x1a, 0xe1,
	0xb4, 0x4c, 0x2c, 0x96, 0xef, 0x7b, 0xdf, 0xf7, 0xee, 0xbd, 0xef, 0xbd, 0xa3, 0x5e, 0x84, 0x3a,
	0x41, 0xed, 0x6b, 0x99, 0x64, 0x0a, 0xf4, 0xb1, 0xc8, 0xfc, 0xe9, 0xc0, 0x37, 0xb3, 0x0c, 0x34,
	0xcf, 0x72, 0x34, 0xc8, 0x76, 0x4b, 0x06, 0xbf, 0x60, 0xf0, 0xe9, 0xa0, 0xe3, 0x56, 0xba, 0x50,
	0x68, 0xf0, 0xa7, 0x83, 0x10, 0x8c, 0x18, 0xf8, 0x11, 0xca, 0xb4, 0x54, 0x75, 0xf6, 0xca, 0xf8,
	0x3b, 0x7b, 0xf2, 0xab, 0x14, 0x65, 0x68, 0x37, 0xc6, 0x18, 0x4b, 0xbc, 0xf8, 0xab, 0xd0, 0xb6,
	0x48, 0x64, 0x8a, 0xbe, 0xfd, 0x96, 0x50, 0xf7, 0x17, 0xa1, 0x9b, 0x43, 0x91, 0x8b, 0x44, 0xb3,
	0x97, 0x74, 0xe7, 0x78, 0x2c, 0x0d, 0x28, 0xa9, 0x0d, 0x8c, 0x5e, 0xa0, 0x4c, 0xb5, 0x43, 0xbc,
	0x66, 0x6f, 0xfb, 0xc1, 0x1e, 0xaf, 0x92, 0x17, 0x95, 0xf0, 0xaa, 0x12, 0x5e, 0x30, 0x82, 0x9a,
	0x84, 0xdd, 0xa3, 0xed, 0xa2, 0x81, 0x43, 0x80, 0x21, 0xe4, 0x11, 0xa4, 0x46, 0xc4, 0xe0, 0x5c,
	0xf3, 0x48, 0x6f, 0x23, 0xa8, 0x07, 0x58, 0x87, 0x5e, 0x1f, 0x41, 0x24, 0x13, 0xa1, 0xb4, 0xd3,
	0xf4, 0x48, 0xaf, 0x19, 0x2c, 0xcf, 0xec, 0x09, 0xa5, 0x7a, 0x2c, 0x72, 0x78, 0x83, 0xef, 0x21,
	0x75, 0x5a, 0x1e, 0xb9, 0xba, 0x94, 0x15, 0xf2, 0xd3, 0xdb, 0x9f, 0xce, 0x4f, 0xfa, 0x4e, 0xdd,
	0xf7, 0xb2, 0xd5, 0xee, 0x37, 0x42, 0xdb, 0xaf, 0xe5, 0x87, 0x89, 0x1c, 0x49, 0x33, 0x1b, 0xe6,
	0x38, 0x95, 0x23, 0xc8, 0xed, 0x7d, 0x46, 0x84, 0x0a, 0x8a, 0x74, 0x0e, 0xf9, 0xf7, 0x7d, 0x4b,
	0x32, 0x7b, 0x4c, 0xb7, 0x32, 0x44, 0x75, 0x54, 0x54, 0x60, 0x9b, 0xbd, 0x52, 0x79, 0xc1, 0x65,
	0x1e, 0xdd, 0x16, 0x51, 0x94, 0x4f, 0x60, 0x74, 0x08, 0xf0, 0xc7, 0x82, 0x55, 0x88, 0xdd, 0xa7,
	0xb7, 0x62, 0x85, 0xa1, 0x50, 0x6a, 0xf6, 0x7c, 0x85, 0xd9, 0xb2, 0xcc, 0x75, 0xa1, 0xee, 0x0f,
	0x42, 0x5b, 0x43, 0x44, 0xc5, 0xfa, 0x74, 0xc7, 0xa0, 0x11, 0x6a, 0x55, 0x47, 0xac, 0xae, 0x86,
	0xb3, 0xbb, 0xf4, 0xa6, 0xc5, 0x96, 0xb6, 0xd8, 0x36, 0x9a, 0xc1, 0x5f, 0xe8, 0x7f, 0x1a, 0xd8,
	0xfa, 0xad, 0xd9, 0xb8, 0x64, 0x6b, 0xba, 0x1f, 0xe9, 0x8d, 0x57, 0x90, 0x82, 0x96, 0xfa, 0xc8,
	0x08, 0x03, 0x8c, 0xd3, 0x56, 0x61, 0x69, 0x35, 0xb3, 0x0e, 0x5f, 0xf7, 0x9c, 0x78, 0x61, 0x49,
	0x60, 0x79, 0xec, 0x19, 0xdd, 0xcc, 0xec, 0x26, 0x54, 0xb3, 0xda, 0xbf, 0x44, 0x61, 0x39, 0x07,
	0x5b, 0xa7, 0xdf, 0xef, 0x34, 0xbe, 0x9c, 0x9f, 0xf4, 0x49, 0x50, 0xc9, 0x0e, 0x1e, 0x9d, 0xce,
	0x5d, 0x72, 0x36, 0x77, 0xc9, 0xcf, 0xb9, 0x4b, 0x3e, 0x2f, 0xdc, 0xc6, 0xd9, 0xc2, 0x6d, 0x7c,
	0x5d, 0xb8, 0x8d, 0xb7, 0xfb, 0xb1, 0x34, 0xe3, 0x49, 0xc8, 0x23, 0x4c, 0xfc, 0xda, 0xfe, 0x85,
	0x9b, 0xf6, 0xd5, 0x3d, 0xfc, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xd3, 0x5f, 0xd5, 0xf6, 0x13, 0x04,
	0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ShareToken != nil {
		{
			size, err := m.ShareToken.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Decimals != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Decimals))
		i--
		dAtA[i] = 0x18
	}
	if m.SwapFeePercentage != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.SwapFeePercentage))
		i--
		dAtA[i] = 0x10
	}
	if len(m.WhitelistedCoins) > 0 {
		for iNdEx := len(m.WhitelistedCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WhitelistedCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LiquidityProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidityProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidityProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GloballyAccruedFees != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.GloballyAccruedFees))
		i--
		dAtA[i] = 0x20
	}
	if m.AccruedFees != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.AccruedFees))
		i--
		dAtA[i] = 0x18
	}
	if m.PoolShare != nil {
		{
			size, err := m.PoolShare.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.StableCoin != nil {
		{
			size, err := m.StableCoin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Pool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SwapFeePercentage != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.SwapFeePercentage))
		i--
		dAtA[i] = 0x28
	}
	if m.ShareToken != nil {
		{
			size, err := m.ShareToken.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Decimals != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Decimals))
		i--
		dAtA[i] = 0x18
	}
	if m.TotalLiquidity != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TotalLiquidity))
		i--
		dAtA[i] = 0x10
	}
	if m.TotalAccruedFees != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TotalAccruedFees))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Pool != nil {
		{
			size, err := m.Pool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.WhitelistedCoins) > 0 {
		for _, e := range m.WhitelistedCoins {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.SwapFeePercentage != 0 {
		n += 1 + sovTypes(uint64(m.SwapFeePercentage))
	}
	if m.Decimals != 0 {
		n += 1 + sovTypes(uint64(m.Decimals))
	}
	if m.ShareToken != nil {
		l = m.ShareToken.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *LiquidityProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StableCoin != nil {
		l = m.StableCoin.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.PoolShare != nil {
		l = m.PoolShare.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.AccruedFees != 0 {
		n += 1 + sovTypes(uint64(m.AccruedFees))
	}
	if m.GloballyAccruedFees != 0 {
		n += 1 + sovTypes(uint64(m.GloballyAccruedFees))
	}
	return n
}

func (m *Pool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalAccruedFees != 0 {
		n += 1 + sovTypes(uint64(m.TotalAccruedFees))
	}
	if m.TotalLiquidity != 0 {
		n += 1 + sovTypes(uint64(m.TotalLiquidity))
	}
	if m.Decimals != 0 {
		n += 1 + sovTypes(uint64(m.Decimals))
	}
	if m.ShareToken != nil {
		l = m.ShareToken.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.SwapFeePercentage != 0 {
		n += 1 + sovTypes(uint64(m.SwapFeePercentage))
	}
	return n
}

func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pool != nil {
		l = m.Pool.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhitelistedCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WhitelistedCoins = append(m.WhitelistedCoins, &types.Coin{})
			if err := m.WhitelistedCoins[len(m.WhitelistedCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapFeePercentage", wireType)
			}
			m.SwapFeePercentage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SwapFeePercentage |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decimals", wireType)
			}
			m.Decimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decimals |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShareToken == nil {
				m.ShareToken = &types.Coin{}
			}
			if err := m.ShareToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiquidityProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidityProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidityProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StableCoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StableCoin == nil {
				m.StableCoin = &types.Coin{}
			}
			if err := m.StableCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolShare", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PoolShare == nil {
				m.PoolShare = &types.Coin{}
			}
			if err := m.PoolShare.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccruedFees", wireType)
			}
			m.AccruedFees = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccruedFees |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GloballyAccruedFees", wireType)
			}
			m.GloballyAccruedFees = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GloballyAccruedFees |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalAccruedFees", wireType)
			}
			m.TotalAccruedFees = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalAccruedFees |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalLiquidity", wireType)
			}
			m.TotalLiquidity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalLiquidity |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decimals", wireType)
			}
			m.Decimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decimals |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShareToken == nil {
				m.ShareToken = &types.Coin{}
			}
			if err := m.ShareToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapFeePercentage", wireType)
			}
			m.SwapFeePercentage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SwapFeePercentage |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pool == nil {
				m.Pool = &Pool{}
			}
			if err := m.Pool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
